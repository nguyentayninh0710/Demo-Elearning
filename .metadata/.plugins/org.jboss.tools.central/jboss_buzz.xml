<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">The Score card editor goes online</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/c9t3ZnCuUyY/the-score-card-editor-goes-online.html" /><author><name>Michael Anstis</name></author><id>https://blog.kie.org/2021/04/the-score-card-editor-goes-online.html</id><updated>2021-04-22T17:30:03Z</updated><content type="html">Following the , that our Score Card editor is available in VSCode, it can now be tried . The online landing page There is no better time to give it a look and provide feedback to drive its road map. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/c9t3ZnCuUyY" height="1" width="1" alt=""/&gt;</content><dc:creator>Michael Anstis</dc:creator><feedburner:origLink>https://blog.kie.org/2021/04/the-score-card-editor-goes-online.html</feedburner:origLink></entry><entry><title>Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MX7-qS50crg/" /><category term=".NET" /><category term="Containers" /><category term="Kubernetes" /><category term="Windows" /><category term=".NET 5" /><category term=".NET containers" /><category term="openshift" /><category term="Windows containers" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=876847</id><updated>2021-04-22T07:00:44Z</updated><published>2021-04-22T07:00:44Z</published><content type="html">&lt;p&gt;Developers who use and target Microsoft&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="/topics/dotnet"&gt;.NET&lt;/a&gt; Framework are no longer outsiders looking in when it comes to developing &lt;a target="_blank" rel="nofollow" href="/topics/containers"&gt;container-based applications&lt;/a&gt;. Whether porting an existing application (for example, a website running in IIS) or creating a new &lt;a target="_blank" rel="nofollow" href="/topics/microservices"&gt;microservice&lt;/a&gt;, or somewhere in between, it is now possible—thanks to Windows containers—to deploy .NET Framework applications to your &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; clusters. This article explores the option of running .NET Framework applications in Windows containers in OpenShift clusters.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article is part of a series introducing &lt;a target="_blank" rel="nofollow" href="/blog/2021/03/16/three-ways-to-containerize-net-applications-on-red-hat-openshift/"&gt;three ways to containerize .NET applications on Red Hat OpenShift&lt;/a&gt;. The previous article introduced &lt;a target="_blank" rel="nofollow" href="/blog/2021/04/15/containerize-net-for-red-hat-openshift-linux-containers-and-net-core/"&gt;Linux containers for .NET Core&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;span id="more-876847"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Windows containers?&lt;/h2&gt; &lt;p&gt;A quick history lesson is in order. While &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; containers can trace their origins all the way back to the &lt;code&gt;chroot&lt;/code&gt; system call created in 1979 (Yes, you read that right: Nineteen seventy-nine), the first generally-recognized full implementation of Linux containers began in 2008 with LXC— LinuX Containers. Two LXC implementations, &lt;a target="_blank" rel="nofollow" href="https://github.com/cloudfoundry-attic/warden"&gt;Warden&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/google/lmctfy"&gt;LMCTFY&lt;/a&gt;, had mild success, but Linux containers really took off with the introduction of Docker in 2013. Following that, issues such as &lt;a target="_blank" rel="nofollow" href="/topics/security"&gt;security&lt;/a&gt;, scaling, networking, and more, blossomed and continue to improve with age. Linux containers have reached the level of acceptance and maturity such that they are arguably becoming the new standard in software development.&lt;/p&gt; &lt;p&gt;Windows containers were introduced to the .NET ecosystem with the release of Windows Server 2016, allowing developers to build, manage, and treat .NET Framework applications just like Linux containers. Commands such as &lt;code&gt;docker build&lt;/code&gt; and &lt;code&gt;docker run&lt;/code&gt; were identical on Windows and Linux. The only difference was the underlying operating system.&lt;/p&gt; &lt;p&gt;Red Hat announced general availability (GA) and support for Windows containers in OpenShift in late December 2020. This means—I&amp;#8217;m repeating myself because it is just so amazing—that you can build an image of your .NET Framework application (such as a website running on IIS) on your Windows PC and run it in your OpenShift cluster.&lt;/p&gt; &lt;p&gt;There is just one consideration: You need a Windows node in your cluster.&lt;/p&gt; &lt;h2&gt;Running Windows containers in OpenShift&lt;/h2&gt; &lt;p&gt;Operations folks, take note: In order to run Windows containers in OpenShift, you&amp;#8217;ll need a cluster that includes a Windows node capable of running Windows containers. That&amp;#8217;s the &amp;#8220;magic sauce&amp;#8221; for running Windows containers in OpenShift. Currently, Windows Server 2019 is the best choice for running Windows containers.&lt;/p&gt; &lt;p&gt;Developers, you have it easy. As a builder of bits, you won&amp;#8217;t really see much difference; you&amp;#8217;ll create your application, build an image, and it will be deployed to OpenShift. A nice thing is that you won&amp;#8217;t have to worry about applications running on the same port. OpenShift is built on Kubernetes, and Kubernetes automagically assigns ports and keeps track of the mapping between what it (Kubernetes) exposes and what your application uses.&lt;/p&gt; &lt;h2&gt;A recipe for success&lt;/h2&gt; &lt;p&gt;Once you have a cluster capable of running Windows containers, I have created a &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/netcandystore"&gt;GitHub repository&lt;/a&gt; (repo) with code and instructions for you to give this exciting technology a go. Until then, you can read and follow along here. Sort of like reading a recipe before you actually make that wonderful dinner.&lt;/p&gt; &lt;p&gt;Super awesome bonus material alert: The repo includes instructions, scripts, and data for creating and building a Microsoft SQL Server database &lt;em&gt;inside your OpenShift&lt;/em&gt; cluster, because why not get dessert with dinner?&lt;/p&gt; &lt;h2&gt;Building the Windows container image&lt;/h2&gt; &lt;p&gt;To build a Windows container image, we need the following ingredients:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A compiled .NET Framework application—in this case, a website to run in IIS&lt;/li&gt; &lt;li&gt;A configuration file to build the image, &amp;#8220;Dockerfile,&amp;#8221; that puts everything together&lt;/li&gt; &lt;li&gt;A command to build the image&lt;/li&gt; &lt;li&gt;An image registry where we can store the image, which we&amp;#8217;ll eventually pull into our OpenShift cluster&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;The compiled application&lt;/h3&gt; &lt;p&gt;We&amp;#8217;re building a website called &amp;#8220;Net Candy Store,&amp;#8221; the MVP (minimal viable project) that our startup needs to get up and running ASAP. At this point, the application is not fully functional, but we want to start building and deploying right away and fine-tune things as we move along.&lt;/p&gt; &lt;p&gt;Using the Git repo I mentioned earlier, we&amp;#8217;ll use the solution (&lt;code&gt;netcandystore.sln&lt;/code&gt;) file in Visual Studio, as shown in Figure 1. Once there, we can use the &lt;b&gt;Publish&lt;/b&gt; option to create the bits needed—the &lt;code&gt;netcandystore.dll&lt;/code&gt; binary.&lt;/p&gt; &lt;div id="attachment_882287" style="width: 933px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-882287" class=" size-full wp-image-882287 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish.png" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish.png" alt="visual studio publish dialog box" width="923" height="275" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish.png 923w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish-300x89.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/netCandyStore_publish-768x229.png 768w" sizes="(max-width: 923px) 100vw, 923px" /&gt;&lt;p id="caption-attachment-882287" class="wp-caption-text"&gt;Figure 1: The Publish Dialog box in Visual Studio.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;That Target location is copied and pasted into our image build configuration file, &amp;#8220;Dockerfile.&amp;#8221;&lt;/p&gt; &lt;h3&gt;The Dockerfile&lt;/h3&gt; &lt;p&gt;Now, we need the instructions for the &lt;code&gt;docker build&lt;/code&gt; command, which are stored in the file, &amp;#8220;Dockerfile.&amp;#8221; Typically, grammar aside, this is just called &amp;#8220;the Dockerfile,&amp;#8221; so we&amp;#8217;ll continue with that. Here are the contents of the Dockerfile:&lt;/p&gt; &lt;pre&gt;# The `FROM` instruction specifies the base image. You are # extending the `microsoft/aspnet` image. FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8 # The final instruction copies the site you published earlier into the container. COPY ./bin/app.publish/ /inetpub/wwwroot &lt;/pre&gt; &lt;p&gt;Basically, we have just two things to do: Use the base image from Microsoft, and copy our binary to the newly-built image. This is literally the simplest Dockerfile I&amp;#8217;ve ever seen.&lt;/p&gt; &lt;h3&gt;A command to build the image&lt;/h3&gt; &lt;p&gt;With all that in place, we use the &lt;code&gt;docker build&lt;/code&gt; command to build the image. For the name and tag of our image, I will use a fully-qualified name that points to the image registry where I&amp;#8217;ll later push the image. The commands I send to OpenShift will pull from that registry. If you use the instructions in &lt;a target="_blank" rel="nofollow" href="https://github.com/donschenck/netcandystore"&gt;the git repo I mentioned earlier&lt;/a&gt;, you&amp;#8217;ll be using &lt;a target="_blank" rel="nofollow" href="https://quay.io/repository/donschenck/netcandystore?tag=latest&amp;#38;tab=tags"&gt;the same image&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With that in mind, here&amp;#8217;s how to build the Windows container image that will run in OpenShift:&lt;/p&gt; &lt;pre&gt;docker build -t quay.io/donschenck/netcandystore:2021mar8.1 .&lt;/pre&gt; &lt;h3&gt;An image registry to store the image&lt;/h3&gt; &lt;p&gt;Now, after logging into my quay.io account, I can run the following command to make the image registry available:&lt;/p&gt; &lt;pre&gt;docker push quay.io/donschenck/netcandystore:2021mar8.1&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;What about licensing?&lt;/strong&gt; To put it simply: Licensing relies on the host machine where you are running the containers. You can find more information on &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/faq"&gt;this Microsoft FAQ page&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Deploying the image in your Windows container&lt;/h2&gt; &lt;p&gt;It&amp;#8217;s go time. We are ready to deploy this image to our Windows container host on OpenShift and start enjoying the fruits of our .NET Framework labors. But there&amp;#8217;s a small catch: If you try to deploy to your cluster, the deployment could crash with a timeout error. There&amp;#8217;s a simple workaround, and I&amp;#8217;ve included a sample of it in my Git repo. The trick is to &lt;code&gt;docker pull&lt;/code&gt; the somewhat large Windows server image (5.25 GB) to your cluster&amp;#8217;s Windows node from within the node itself. As a bonus, if you run other Windows containers in your cluster, on the same Windows node, they can use that same server image. In other words, you probably only need to do this &amp;#8220;preload&amp;#8221; once.&lt;/p&gt; &lt;p&gt;The details of this step are on my Git repo, so I won&amp;#8217;t repeat them here. The overview is this: Find the name of the Windows node and use SSH to run the &lt;code&gt;docker pull&lt;/code&gt; command inside of it. Once that is done—it takes two or three minutes—the rest is typical OpenShift operations: Create a deployment that points to your application image, an associated service, and a route to publicly expose it.&lt;/p&gt; &lt;h2&gt;Conclusion: A guide to follow&lt;/h2&gt; &lt;p&gt;If you want to follow a step-by-step guide, including code for a Windows container, an installation of SQL Server on OpenShift, and the installation of a .NET 5 (&lt;a target="_blank" rel="nofollow" href="/topics/dotnet"&gt;.NET Core&lt;/a&gt;) application running in a Linux container, follow this repo: &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/netcandystore"&gt;https://github.com/redhat-developer-demos/netcandystore&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#38;linkname=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fcontainerize-net-for-red-hat-openshift-windows-containers-and-net-framework%2F&amp;#038;title=Containerize%20.NET%20for%20Red%20Hat%20OpenShift%3A%20Windows%20containers%20and%20.NET%20Framework" data-a2a-url="https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/" data-a2a-title="Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/"&gt;Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MX7-qS50crg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Developers who use and target Microsoft&amp;#8217;s .NET Framework are no longer outsiders looking in when it comes to developing container-based applications. Whether porting an existing application (for example, a website running in IIS) or creating a new microservice, or somewhere in between, it is now possible—thanks to Windows containers—to deploy .NET Framework applications to your [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/"&gt;Containerize .NET for Red Hat OpenShift: Windows containers and .NET Framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">876847</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2021-04-22T07:00:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/22/containerize-net-for-red-hat-openshift-windows-containers-and-net-framework/</feedburner:origLink></entry><entry><title>Using Podman Compose with Microcks: A cloud-native API mocking and testing tool</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/P6Tzmat8xRs/" /><category term="Containers" /><category term="Kubernetes" /><category term="Open source" /><category term="API testing" /><category term="Microcks" /><category term="Podman" /><category term="rootless containers" /><author><name>Nicolas Massé</name></author><id>https://developers.redhat.com/blog/?p=872867</id><updated>2021-04-22T07:00:12Z</updated><published>2021-04-22T07:00:12Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://microcks.io/"&gt;Microcks&lt;/a&gt; is a cloud-native API mocking and testing tool. It helps you cover your &lt;a target="_blank" rel="nofollow" href="/blog/2019/02/25/full-api-lifecycle-management-a-primer/"&gt;API&amp;#8217;s full lifecycle&lt;/a&gt; by taking your OpenAPI specifications and generating live mocks from them. It can also assert that your API implementation conforms to your OpenAPI specifications. You can deploy Microcks in a wide variety of cloud-native platforms, such as &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Developers who do not have corporate access to a cloud-native platform have used &lt;a target="_blank" rel="nofollow" href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;. Although Docker is still the most popular container option for software packaging and installation, &lt;a target="_blank" rel="nofollow" href="https://podman.io/"&gt;Podman&lt;/a&gt; is gaining traction.&lt;/p&gt; &lt;p&gt;Podman was advertised as a drop-in replacement for Docker. Advocates gave the impression that you could issue &lt;code&gt;alias docker=podman&lt;/code&gt; and you would be good to go. The reality is more nuanced, and the community had to work to get proper &lt;code&gt;docker-compose&lt;/code&gt; support in Microcks for Podman.&lt;/p&gt; &lt;p&gt;This article discusses the barriers to getting Microcks to work with Podman and the design decisions we made to get around them. It includes a brief example of using Podman in rootless mode with Microcks.&lt;/p&gt; &lt;h2&gt;Supporting Podman in Microcks&lt;/h2&gt; &lt;p&gt;Podman presented a few design barriers, which the Microcks community had to work around. We&amp;#8217;ll discuss the barriers and how we worked around them, and what those decisions mean for developers using Podman with Microcks.&lt;/p&gt; &lt;h3&gt;Rootfull or rootless?&lt;/h3&gt; &lt;p&gt;Docker requires running a daemon as root, which observers have long criticized as insecure. Podman adopted a very different architecture: It involves no daemon at all and can run as root (rootfull mode) or as a regular user (rootless mode). Microcks supports Podman in either rootfull or rootless mode.&lt;/p&gt; &lt;p&gt;Although rootless mode looks very appealing, it does not come without cost. Drawbacks include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Containers have no IP address and no DNS aliases.&lt;/li&gt; &lt;li&gt;Port redirection is done in userspace, whereas rootfull mode uses &lt;a target="_blank" rel="nofollow" href="https://linux.die.net/man/8/iptables"&gt;iptables&lt;/a&gt;, which is faster.&lt;/li&gt; &lt;li&gt;The overlay storage is done in userspace with &lt;a target="_blank" rel="nofollow" href="https://cloud.google.com/storage/docs/gcs-fuse"&gt;FUSE&lt;/a&gt;, which is slower than the traditional &lt;a target="_blank" rel="nofollow" href="https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html"&gt;overlayFS&lt;/a&gt; mount.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Still, unless you need high performance or a specific network setup, you can use rootless mode.&lt;/p&gt; &lt;h3&gt;DNS aliases: Still in the way&lt;/h3&gt; &lt;p&gt;Microcks needs proper DNS aliases in place to work properly. The main reason is that Microcks uses the OpenID Connect protocol for user authentication, which involves both user-facing interactions and server-to-server interactions.&lt;/p&gt; &lt;p&gt;Combined with the quirks and limitations of the other software in the stack (Keycloak, Docker, Podman), this requirement explains why it has always been challenging to get Microcks running without tinkering with the Docker Compose configuration.&lt;/p&gt; &lt;p&gt;To work around this issue, the community created a shell script that discovers the current machine IP address and hardcodes that address in the &lt;code&gt;podman-compose&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;To get DNS aliases working, you need to enable the &lt;code&gt;dnsname&lt;/code&gt; plugin in the default &lt;code&gt;podman&lt;/code&gt; network.&lt;/p&gt; &lt;h3&gt;Networking&lt;/h3&gt; &lt;p&gt;With the rootfull mode in Podman came another challenge: By default, containers can refer to other containers only by their IP addresses. This command re-creates the default &lt;code&gt;podman&lt;/code&gt; network and enables the &lt;code&gt;dnsname&lt;/code&gt; plugin:&lt;/p&gt; &lt;pre&gt;$ sudo podman network rm podman $ sudo podman network create --subnet 10.88.0.0/16 podman &lt;/pre&gt; &lt;h2&gt;Using Podman Compose with Microcks&lt;/h2&gt; &lt;p&gt;Podman support might not look glorious as presented here, but the benefits of using Podman are worth the effort!&lt;/p&gt; &lt;p&gt;The rootless mode is the easiest and safest way to get Microcks working with Podman Compose:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/microcks/microcks.git $ cd microcks/install/podman-compose $ ./run-microcks.sh Running rootless containers... Discovered host IP address: 192.168.3.102 Starting Microcks using podman-compose ... ------------------------------------------ Stop it with: podman-compose -f microcks.yml --transform_policy=identity stop Re-launch it with: podman-compose -f microcks.yml --transform_policy=identity start Clean everything with: podman-compose -f microcks.yml --transform_policy=identity down ------------------------------------------ Go to https://localhost:8080 - first login with admin/123 Having issues&lt;span class="pl-k"&gt;?&lt;/span&gt; Check you have changed microcks.yml to your platform using podman version: podman version 2.1.1 podman run [...]&lt;/pre&gt; &lt;p&gt;Rootfull mode requires that you enable the &lt;code&gt;dnsname&lt;/code&gt; plugin on the default &lt;code&gt;podman&lt;/code&gt; network, as described earlier. Then, you would just run this script with sudo.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Getting Microcks to work with Podman was not particularly difficult. We hope this support will help you get started with using Microcks in corporate environments. Read the &lt;a target="_blank" rel="nofollow" href="https://microcks.io/blog/podman-compose-support/"&gt;announcement on microcks.io&lt;/a&gt; for more details.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#38;linkname=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fusing-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool%2F&amp;#038;title=Using%20Podman%20Compose%20with%20Microcks%3A%20A%20cloud-native%20API%20mocking%20and%20testing%20tool" data-a2a-url="https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/" data-a2a-title="Using Podman Compose with Microcks: A cloud-native API mocking and testing tool"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/"&gt;Using Podman Compose with Microcks: A cloud-native API mocking and testing tool&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/P6Tzmat8xRs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Microcks is a cloud-native API mocking and testing tool. It helps you cover your API&amp;#8217;s full lifecycle by taking your OpenAPI specifications and generating live mocks from them. It can also assert that your API implementation conforms to your OpenAPI specifications. You can deploy Microcks in a wide variety of cloud-native platforms, such as Kubernetes and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/"&gt;Using Podman Compose with Microcks: A cloud-native API mocking and testing tool&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">872867</post-id><dc:creator>Nicolas Massé</dc:creator><dc:date>2021-04-22T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/22/using-podman-compose-with-microcks-a-cloud-native-api-mocking-and-testing-tool/</feedburner:origLink></entry><entry><title>Remote LLVM development with Visual Studio Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8EdnrkJqKsQ/" /><category term="C" /><category term="clang/LLVM" /><category term="Linux" /><category term="VS Code" /><category term="Remote LLVM" /><category term="Visual Studio Code" /><category term="VS Code for LLVM" /><author><name>Konrad Kleine</name></author><id>https://developers.redhat.com/blog/?p=434777</id><updated>2021-04-22T07:00:11Z</updated><published>2021-04-22T07:00:11Z</published><content type="html">&lt;p&gt;I used the &lt;a target="_blank" rel="nofollow" href="https://www.qt.io/product/development-tools"&gt;Qt Creator IDE&lt;/a&gt; for most of my &lt;a target="_blank" rel="nofollow" href="/topics/c"&gt;C++&lt;/a&gt; work in the past. Then I joined Red Hat around mid-2016 and worked on a project with &lt;a target="_blank" rel="nofollow" href="/blog/category/go/"&gt;Go&lt;/a&gt; for three years. I quickly realized that I wanted something similar to Qt Creator. I’m a regular &lt;a target="_blank" rel="nofollow" href="https://www.vim.org/"&gt;Vim&lt;/a&gt; user, but use it only for plain-text editing and not much more. I gave Vim a shot when really I was looking for something that works out of the box and can still be customized. As usual for a modern project, I needed to be able to do more than edit the files of one programming realm. Enter &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; (&lt;a target="_blank" rel="nofollow" href="/blog/category/vs-code/"&gt;VS Code&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;I can&amp;#8217;t say that VS Code worked out of the box. But being new to Go, I figured I would give it a try, especially because others were using it. Three years later, in 2019, I needed a change and joined our debuggers group to work on &lt;a target="_blank" rel="nofollow" href="https://lldb.llvm.org/"&gt;LLDB&lt;/a&gt;, a debugger that is part of the much larger &lt;a target="_blank" rel="nofollow" href="https://llvm.org/"&gt;LLVM&lt;/a&gt; project. LLVM also hosts &lt;a target="_blank" rel="nofollow" href="/blog/category/clang-llvm/"&gt;Clang&lt;/a&gt;, a well-known compiler front-end for C-like languages.&lt;/p&gt; &lt;p&gt;I began by checking out the LLVM codebase—which is huge, by the way—and compiling it on my local machine, which was very slow. You can read about my initial endeavor to speed up the compilation in &lt;a target="_blank" rel="nofollow" href="/blog/2019/05/15/2-tips-to-make-your-c-projects-compile-3-times-faster/"&gt;this article&lt;/a&gt;. To sum things up: A notebook isn’t ideal when you want to code and compile with LLVM. The speed of compilation isn’t the only thing that matters. It’s the linking, as well, that can easily freeze my laptop. That said, distributed compilation using &lt;a target="_blank" rel="nofollow" href="https://github.com/distcc/distcc"&gt;distcc&lt;/a&gt; or similar tools doesn&amp;#8217;t cut it.&lt;/p&gt; &lt;p&gt;Our group in Red Hat has access to high-powered shared machines in Toronto (e.g., 56 cores with 256 GB of memory). I live in Germany, and at first I was skeptical whether I could successfully use those machines without too much latency. Qt Creator wasn’t a true option for editing files remotely because, as far as I know, it needed to run next to the code it was supposed to compile. After giving Vim and &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; another shot for coding and compiling remotely, I went back to VS Code and found out that there’s a &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/remote/ssh"&gt;remote SSH extension&lt;/a&gt;. This article navigates you through how I’ve been using VS Code&amp;#8217;s remote SSH extension for editing and compiling LLVM, step by step.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;My base system is a laptop running the &lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;Fedora&lt;/a&gt; 32 operating system. For the sake of this tutorial, we’ll call the remote host just &lt;code&gt;remote-host&lt;/code&gt;. If you want to follow the tutorial step by step, you can put the following into your &lt;code&gt;~/.ssh/config&lt;/code&gt; file to create an alias to whatever host you want:&lt;/p&gt; &lt;pre&gt;Host remote-host HostName YOUR_OWN_REMOTE_HOST_GOES_HERE User USER_NAME_WITH_WHICH_YOU_LOGIN_TO_YOUR_REMOTE_HOST&lt;/pre&gt; &lt;p&gt;Replace the obvious bits in that definition. Make sure you can log in to the remote host &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication"&gt;without entering a password&lt;/a&gt; by copying the public part of your SSH-key to the remote host: &lt;code&gt;ssh-copy-id remote-host&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Double-check that you can now log in using &lt;code&gt;ssh remote-host&lt;/code&gt;. Now log back out.&lt;/p&gt; &lt;h2&gt;Setting up VS Code&lt;/h2&gt; &lt;p&gt;First, make sure you have a recent copy of VS Code or grab it from &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/download"&gt;the download site&lt;/a&gt;. Once it&amp;#8217;s installed, you will need a bunch of extensions. To install the extensions I find useful when building and editing LLVM, run this snippet in the command line:&lt;/p&gt; &lt;pre&gt;$ for i in ms-vscode.cmake-tools \ ms-vscode-remote.remote-ssh \ ms-python.python \ ms-vscode.cpptools \ twxs.cmake \ rreverser.llvm \ jakob-erzar.llvm-tablegen \ xaver.clang-format \ pkief.material-icon-theme; do code --install-extension $i; done&lt;/pre&gt; &lt;h2&gt;Preparing the remote host&lt;/h2&gt; &lt;p&gt;In my case, the architecture of the remote host (Fedora 31) and my laptop is the same: x86_64. I&amp;#8217;m not sure if this always needs to be the case. I can confirm that instead of my &lt;a target="_blank" rel="nofollow" href="/topics/linux"&gt;Linux&lt;/a&gt; laptop and Linux remote host, I can use a Mac laptop and a Linux remote host. I&amp;#8217;m sure the same is true for Windows.&lt;/p&gt; &lt;p&gt;Log in to the remote host with:&lt;/p&gt; &lt;pre&gt;$ ssh remote-host&lt;/pre&gt; &lt;p&gt;Your remote host needs to have all the development tools installed that are required to build LLVM.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s decide where to download LLVM and refer to it with an environment variable for now. In my case, the directory is &lt;em&gt;not&lt;/em&gt; &lt;code&gt;~/&lt;/code&gt; which would have simplified things a bit:&lt;/p&gt; &lt;pre&gt;$ export MYHOME=/opt/notnfs/kkleine/ # replace this with ~/&lt;/pre&gt; &lt;p&gt;Navigate to &lt;code&gt;$MYHOME&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cd $MYHOME&lt;/pre&gt; &lt;p&gt;Fetch the LLVM source tree:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/llvm/llvm-project&lt;/pre&gt; &lt;p&gt;Now create a build directory inside the source directory:&lt;/p&gt; &lt;pre&gt;$ mkdir llvm-project/build&lt;/pre&gt; &lt;p&gt;This directory makes it simpler to find build files within the VS Code IDE later.&lt;/p&gt; &lt;h2&gt;Firing up VS Code&lt;/h2&gt; &lt;p&gt;When you start VS Code, it presents a screen like Figure 1.&lt;/p&gt; &lt;div id="attachment_802397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47.png"&gt;&lt;img aria-describedby="caption-attachment-802397" class="wp-image-802397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-1024x807.png" alt="VS Code presents a screen full of options at startup." width="640" height="504" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-1024x807.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-300x236.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47-768x605.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-17-47.png 1044w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802397" class="wp-caption-text"&gt;Figure 1: The VS Code startup screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notice the little green icon in the lower left corner of the screen. Click on it and select &lt;strong&gt;Remote-SSH: Connect Current Window to Host&amp;#8230;&lt;/strong&gt; as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_802417" style="width: 615px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00.png"&gt;&lt;img aria-describedby="caption-attachment-802417" class="wp-image-802417 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00.png" alt="Menu displayed when you pull down the green icon in the lower left corner of the startup screen." width="605" height="138" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00.png 605w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-14-16-21-00-300x68.png 300w" sizes="(max-width: 605px) 100vw, 605px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802417" class="wp-caption-text"&gt;Figure 2: Select &amp;#8216;Remote-SSH: Connect Current Window to Host&amp;#8230;&amp;#8217; from the menu.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you&amp;#8217;ve configured your &lt;code&gt;~/.ssh/config&lt;/code&gt; properly, you can now select &lt;code&gt;remote-host&lt;/code&gt; from the drop-down list. Notice that the green icon from before now shows &lt;strong&gt;Opening Remote &amp;#8230;&lt;/strong&gt; and then turns into &lt;strong&gt;SSH: remote-host&lt;/strong&gt; once you have connected successfully.&lt;/p&gt; &lt;p&gt;Congratulations: You can now edit files on your remote host using VS Code. To test this, go to &lt;strong&gt;File—&amp;#62;Open File&amp;#8230;&lt;/strong&gt; and open the main &lt;code&gt;CMakeLists.txt&lt;/code&gt; file from the LLVM project that you checked out earlier: &lt;code&gt;/opt/notnfs/kkleine/llvm-project/llvm/CMakeLists.txt&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Installing extensions remotely&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s head over to the extensions by clicking on the extensions symbol, which is a grid of squares. Notice that the side panel shows locally installed extensions and marks some with &lt;strong&gt;Install in SSH: remote-host&lt;/strong&gt;. Click that little green icon to view all the extensions that can be installed on the remote host. Once that&amp;#8217;s done, click the blue &lt;strong&gt;Reload Required&lt;/strong&gt; icon and enjoy all the extensions when developing remotely.&lt;/p&gt; &lt;h2&gt;Adjusting the settings&lt;/h2&gt; &lt;p&gt;We need to adjust some settings for &lt;a target="_blank" rel="nofollow" href="https://cmake.org/"&gt;CMake&lt;/a&gt; to work properly. Press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; to open the command palette in Visual Studio Code and start typing &lt;code&gt;&amp;#62;open remote set&lt;/code&gt;, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_802627" style="width: 616px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03.png"&gt;&lt;img aria-describedby="caption-attachment-802627" class="wp-image-802627 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03.png" alt="When you type '&amp;#62;open remote se' in the command palette, VS Code autofills it to 'Open Remote Settings (SSH: remote-host)'." width="606" height="72" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03.png 606w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-03-300x36.png 300w" sizes="(max-width: 606px) 100vw, 606px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802627" class="wp-caption-text"&gt;Figure 3: Autofill in the command palette.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then, click on &lt;strong&gt;Preferences: Open Remote Settings (SSH: remote-host)&lt;/strong&gt;. This should open up a &lt;code&gt;settings.json&lt;/code&gt; file in a new tab, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_802647" style="width: 519px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21.png"&gt;&lt;img aria-describedby="caption-attachment-802647" class="wp-image-802647 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21.png" alt="The initial contents of the remote settings file: An empty set of braces." width="509" height="107" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21.png 509w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-11-47-21-300x63.png 300w" sizes="(max-width: 509px) 100vw, 509px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802647" class="wp-caption-text"&gt;Figure 4: Open the remote settings file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This file is an empty &lt;a target="_blank" rel="nofollow" href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/getstarted/settings"&gt;settings&lt;/a&gt; file, in my case. If you already have configurations in there, I assume that you have used VS Code before and know how to integrate my settings into yours. If your file is empty, you can copy the settings here:&lt;/p&gt; &lt;pre&gt;{ //-------------------------------------------------------------------------- // C++ //-------------------------------------------------------------------------- "clang-format.fallbackStyle": "LLVM", "clang-format.style": "LLVM", "C_Cpp.clang_format_style": "LLVM", "C_Cpp.default.cppStandard": "c++14", "C_Cpp.default.cStandard": "c11", //-------------------------------------------------------------------------- // CMake //-------------------------------------------------------------------------- "cmake.generator": "Ninja", // Adjust this path to the expansion of $MYHOME/llvm-project/llvm. "cmake.sourceDirectory": "/opt/notnfs/kkleine/llvm-project/llvm", // Adjust this path to the expansion of $MYHOME/llvm-project/build. "cmake.buildDirectory": "/opt/notnfs/kkleine/llvm-project/build", "cmake.configureSettings": { "LLVM_ENABLE_PROJECTS": ["clang","clang-tools-extra","compiler-rt","lld","mlir"], "CMAKE_EXPORT_COMPILE_COMMANDS": 1, "BUILD_SHARED_LIBS": "Off", "LLVM_BUILD_LLVM_DYLIB": "On", "LLVM_LINK_LLVM_DYLIB": "On", "CLANG_LINK_CLANG_DYLIB": "On", // I only need LLVM Backends to produce X86, decide what you need here! "LLVM_TARGETS_TO_BUILD": "X86", "LLVM_ENABLE_LDD": "On", "LLVM_CCACHE_BUILD": "On", "LLVM_CCACHE_MAXSIZE": "20G", "LLVM_ENABLE_IDE": "On", "LLVM_ENABLE_ASSERTIONS": "On", "LLVM_BUILD_EXAMPLES": "On", "LLVM_LIT_ARGS": "-v --xunit-xml-output test-results.xml", "PYTHON_EXECUTABLE": "/usr/bin/python3", }, //-------------------------------------------------------------------------- // Editor //-------------------------------------------------------------------------- "editor.mouseWheelZoom": true, "editor.renderIndentGuides": false, "editor.rulers": [80], "editor.formatOnPaste": false, "editor.renderWhitespace": "all", //-------------------------------------------------------------------------- // Misc //-------------------------------------------------------------------------- "telemetry.enableTelemetry": false, "telemetry.enableCrashReporter": false, "": { "editor.defaultFormatter": "xaver.clang-format" }, "workbench.iconTheme": "material-icon-theme", }&lt;/pre&gt; &lt;p&gt;I&amp;#8217;ve added a minimum of my personal settings to the JSON file. You can omit the &lt;code&gt;Editor&lt;/code&gt; and &lt;code&gt;Misc&lt;/code&gt; sections if you don&amp;#8217;t want them. When you are done, save the file with &lt;strong&gt;Ctrl+S&lt;/strong&gt;.&lt;/p&gt; &lt;h2&gt;Configuring the LLVM project with CMake&lt;/h2&gt; &lt;p&gt;Click on &lt;strong&gt;File—&amp;#62;Open Folder&lt;/strong&gt; and type in the expansion of &lt;code&gt;$MYHOME/llvm-project&lt;/code&gt; (e.g.,&lt;code&gt;~/llvm-project&lt;/code&gt;), as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_802747" style="width: 614px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33.png"&gt;&lt;img aria-describedby="caption-attachment-802747" class="wp-image-802747 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33.png" alt="Type the absolute path to the llvm-project folder into the Open Folder dialog." width="604" height="67" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33.png 604w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-34-33-300x33.png 300w" sizes="(max-width: 604px) 100vw, 604px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802747" class="wp-caption-text"&gt;Figure 5: Type in the absolute path to the llvm-project folder.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Open up the command palette in VS Code again by typing &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; followed by &lt;code&gt;&amp;#62;cmake&lt;/code&gt;. This should bring up the list in Figure 6, from which you can select &lt;strong&gt;CMake: Select a Kit&lt;/strong&gt;.&lt;/p&gt; &lt;div id="attachment_802777" style="width: 611px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29.png"&gt;&lt;img aria-describedby="caption-attachment-802777" class="wp-image-802777 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29.png" alt="Select the option 'CMake: Select a Kit'." width="601" height="109" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29.png 601w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-37-29-300x54.png 300w" sizes="(max-width: 601px) 100vw, 601px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802777" class="wp-caption-text"&gt;Figure 6: Select the &amp;#8216;CMake: Select a Kit&amp;#8217; option.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the next dialog, shown in Figure 7, pick the compiler you want to use for compiling LLVM, or select &lt;strong&gt;[Scan for kits]&lt;/strong&gt; if you don&amp;#8217;t see any options. (I chose Clang 9.0.1.)&lt;/p&gt; &lt;div id="attachment_802767" style="width: 628px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07.png"&gt;&lt;img aria-describedby="caption-attachment-802767" class="wp-image-802767 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07.png" alt="A list of compiler options." width="618" height="230" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07.png 618w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-38-07-300x112.png 300w" sizes="(max-width: 618px) 100vw, 618px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802767" class="wp-caption-text"&gt;Figure 7: VS Code presents the available compiler options.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, you need to decide on the build variant in which CMake will configure your project. Bring back the command palette with &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and Type &lt;code&gt;CMake Select Variant&lt;/code&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_802797" style="width: 623px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04.png"&gt;&lt;img aria-describedby="caption-attachment-802797" class="wp-image-802797 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04.png" alt="Selecting a build variant through &amp;#34;CMake Select Variant&amp;#34;" width="613" height="75" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-04-300x37.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802797" class="wp-caption-text"&gt;Figure 8: Select a build variant through &amp;#8216;CMake Select Variant&amp;#8217;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, choose &lt;strong&gt;Release&lt;/strong&gt;, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_802787" style="width: 626px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12.png"&gt;&lt;img aria-describedby="caption-attachment-802787" class="wp-image-802787 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12.png" alt="Choosing Release as the build variant." width="616" height="142" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12.png 616w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-41-12-300x69.png 300w" sizes="(max-width: 616px) 100vw, 616px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802787" class="wp-caption-text"&gt;Figure 9: Choose Release as the build variant.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notice that the Status bar now looks like Figure 10. From now on, you can control which target you want to build from this bar.&lt;/p&gt; &lt;div id="attachment_802807" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34.png"&gt;&lt;img aria-describedby="caption-attachment-802807" class="wp-image-802807" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34.png" alt="The status bar after choosing a build variant." width="640" height="21" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34.png 720w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-12-45-34-300x10.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802807" class="wp-caption-text"&gt;Figure 10: The status bar after choosing a build variant.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If an output pane shows something like the following when the configuration is done, you&amp;#8217;ve successfully configured LLVM:&lt;/p&gt; &lt;pre&gt;[cmake] -- Performing Test HAVE_POSIX_REGEX -- success [cmake] -- Performing Test HAVE_STEADY_CLOCK -- success [cmake] -- Configuring done [cmake] -- Generating done [cmake] -- Build files have been written to: /opt/notnfs/kkleine/llvm-project/build&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You can read more about CMake in VS Code in the article &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/docs/cpp/cmake-linux"&gt;&lt;em&gt;Get started with CMake Tools on Linux&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;First build of Clang with VS Code&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s do our first build of Clang. Click on &lt;strong&gt;[all]&lt;/strong&gt; in the status bar and type in &lt;code&gt;clang&lt;/code&gt; to select the &lt;code&gt;clang Executable&lt;/code&gt;. Notice that the status bar now shows &lt;strong&gt;[clang]&lt;/strong&gt; instead of &lt;strong&gt;[all]&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Don&amp;#8217;t be afraid to hit that &lt;strong&gt;[Build]&lt;/strong&gt; button to build the selected target.&lt;/p&gt; &lt;p&gt;Something interesting is that VS Code doesn&amp;#8217;t care whether you chose Ninja or Make to build your project, because it calls CMake to invoke the underlying build system:&lt;/p&gt; &lt;pre&gt;[main] Building folder: llvm-project [build] Starting build [proc] Executing command: /usr/bin/cmake --build /opt/notnfs/kkleine/llvm-project/build --config Release --target clang -- -j 58 [build] [58/2573 0% :: 0.383] Building CXX object lib/Support/CMakeFiles/LLVMSupport.dir/ABIBreak.cpp.o [build] [59/2573 0% :: 0.462] Building CXX object lib/Support/CMakeFiles/LLVMSupport.dir/COM.cpp.o/usr/bin/cmake --build /opt/notnfs/kkleine/llvm-project/build --config Release --target clang -- -j 58&lt;/pre&gt; &lt;h2&gt;Bringing in a terminal&lt;/h2&gt; &lt;p&gt;VS Code does come with a terminal window. You can open it with &lt;strong&gt;Ctrl+`&lt;/strong&gt; (the backtick character). The terminal looks like Figure 11.&lt;/p&gt; &lt;div id="attachment_802867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23.png"&gt;&lt;img aria-describedby="caption-attachment-802867" class="wp-image-802867" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23.png" alt="A command-line interface in the VS Code terminal window." width="640" height="52" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23.png 890w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23-300x24.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-14-04-23-768x62.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-802867" class="wp-caption-text"&gt;Figure 11: A command-line interface in the VS Code terminal window.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Try testing your freshly built compiler with this snippet:&lt;/p&gt; &lt;pre&gt;$ cd build $ echo "int main(){return 42;}" | ./bin/clang++ -x c++ - $ ./a.out ; echo $? 42&lt;/pre&gt; &lt;p&gt;I typically run some commands like &lt;code&gt;./bin/llvm-lit -v &lt;em&gt;sometest&lt;/em&gt;&lt;/code&gt; in the terminal window. One nice thing about the terminal is that you can &lt;strong&gt;Ctrl+Click&lt;/strong&gt; on any of the file paths to open them in the current VS Code window in a new tab. That makes opening and navigating files from the terminal extremely convenient.&lt;/p&gt; &lt;p&gt;From here onward you can use all the goodies of VS Code, such as autocompletion, go-to declaration, switching between header and implementation, and so forth.&lt;/p&gt; &lt;h2&gt;Launching the configuration for LLVM-LIT&lt;/h2&gt; &lt;p&gt;To run &lt;code&gt;llvm-lit -av &lt;em&gt;current_file&lt;/em&gt;&lt;/code&gt; from inside VS Code, without using the terminal, you can bring back the command palette with &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;code&gt;&amp;#62;launch&lt;/code&gt; to open the &lt;code&gt;launch.json&lt;/code&gt; file. The menu displayed looks similar to Figure 12.&lt;/p&gt; &lt;div id="attachment_803187" style="width: 618px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52.png"&gt;&lt;img aria-describedby="caption-attachment-803187" class="wp-image-803187 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52.png" alt="Typing '&amp;#62;launch' into the command palette pulls up a menu of options containing the string 'launch'.." width="608" height="92" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52.png 608w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-48-52-300x45.png 300w" sizes="(max-width: 608px) 100vw, 608px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-803187" class="wp-caption-text"&gt;Figure 12: The menu displayed when you type &amp;#8216;&amp;#62;launch&amp;#8217; into the command palette.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This file can contain multiple semi-generic configurations for programs you want to launch from time to time. Here&amp;#8217;s a configuration that will launch &lt;code&gt;llvm-lit&lt;/code&gt; on the current file:&lt;/p&gt; &lt;pre&gt;{ "version": "0.2.0", "configurations": [ { "name": "llvm-lit current file", "type": "python", "request": "launch", "program": "/opt/notnfs/kkleine/llvm-project/build/bin/llvm-lit", "args": ["${fileBasename}"], "cwd": "${fileDirname}", } { "name": "llvm-lit all tests in current dir", "type": "python", "request": "launch", "program": "/opt/notnfs/kkleine/llvm-project/build/bin/llvm-lit", "args": ["."], "cwd": "${fileDirname}", } ] }&lt;/pre&gt; &lt;p&gt;You just need to adjust the path to point to your &lt;code&gt;llvm-lit&lt;/code&gt; binary.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the file hasn&amp;#8217;t been built yet, try building the &lt;code&gt;all&lt;/code&gt; target or the &lt;code&gt;check-llvm-tools-llvm-lit&lt;/code&gt; target.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s open a specific lit file by pressing &lt;strong&gt;Ctrl+P&lt;/strong&gt;. This opens a fuzzy dialog. Type &lt;code&gt;ast-dump-decl.c&lt;/code&gt; and observe where the file is found (shown in Figure 13).&lt;/p&gt; &lt;div id="attachment_803197" style="width: 607px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32.png"&gt;&lt;img aria-describedby="caption-attachment-803197" class="wp-image-803197 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32.png" alt="VS Code displays all the file names that match or resemble the 'ast-dump-decl.c' string." width="597" height="270" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32.png 597w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screenshot-from-2020-10-15-16-57-32-300x136.png 300w" sizes="(max-width: 597px) 100vw, 597px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-803197" class="wp-caption-text"&gt;Figure 13: Find files that match or are similar to the &lt;code&gt;ast-dump-decl.c&lt;/code&gt; string.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the file is opened, click on the debug symbol in the left-side bar to open a debugging pane. At this point we&amp;#8217;re not interested in debugging in the classic sense; we just want to launch &lt;code&gt;llvm-lit&lt;/code&gt;. Click the small Play button (the triangle icon) next to your launch target name at the top of the screen. In this case, the launch target is &lt;strong&gt;llvm-lit current file&lt;/strong&gt;. A terminal will open and show results like the following:&lt;/p&gt; &lt;pre&gt;$ cd /opt/notnfs/kkleine/llvm-project/clang/test/AST ; env /usr/bin/python /home/kkleine/.vscode-server/extensions/ms-python.python-2020.6.91350/pythonFiles/lib/python/debugpy/launcher 44349 -- /opt/notnfs/kkleine/llvm-project/build/bin/llvm-lit ast-dump-decl.c llvm-lit: /opt/notnfs/kkleine/llvm-project/build/bin/../../llvm/utils/lit/lit/llvm/config.py:347: note: using clang: /opt/notnfs/kkleine/llvm-project/build/bin/clang -- Testing: 1 tests, 1 workers -- PASS: Clang :: AST/ast-dump-decl.c (1 of 1) Testing Time: 1.90s Passed: 1&lt;/pre&gt; &lt;p&gt;Feel free to run all the tests within the same directory as the current test file by selecting the other launch target, which is called &lt;code&gt;llvm-lit all tests in current dir&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I hope you enjoyed reading this article—happy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#38;linkname=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F22%2Fremote-llvm-development-with-visual-studio-code%2F&amp;#038;title=Remote%20LLVM%20development%20with%20Visual%20Studio%20Code" data-a2a-url="https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/" data-a2a-title="Remote LLVM development with Visual Studio Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/"&gt;Remote LLVM development with Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8EdnrkJqKsQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I used the Qt Creator IDE for most of my C++ work in the past. Then I joined Red Hat around mid-2016 and worked on a project with Go for three years. I quickly realized that I wanted something similar to Qt Creator. I’m a regular Vim user, but use it only for plain-text editing [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/"&gt;Remote LLVM development with Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">434777</post-id><dc:creator>Konrad Kleine</dc:creator><dc:date>2021-04-22T07:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/22/remote-llvm-development-with-visual-studio-code/</feedburner:origLink></entry><entry><title type="html">Quarkus 2.0.0.Alpha1 released - Vert.x 4, MicroProfile 4 and Continuous Testing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3_VlwT9KnWA/" /><author><name /></author><id>https://quarkus.io/blog/quarkus-2-0-0-alpha1-released/</id><updated>2021-04-22T00:00:00Z</updated><content type="html">It is with a bit of emotion that I announce today the release of Quarkus 2.0.0.Alpha1. As previously presented, Quarkus 2.0 is in the continuity of Quarkus 1.x and won’t require too many changes on your side. But we consider it a major release as major parts of our infrastructure...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3_VlwT9KnWA" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/quarkus-2-0-0-alpha1-released/</feedburner:origLink></entry><entry><title>Access your Developer Sandbox for Red Hat OpenShift from the command line</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/W2huw4RknqM/" /><category term="Containers" /><category term="Developer Tools" /><category term="Kubernetes" /><category term="Uncategorized" /><category term="OpenShift Developer Sandbox" /><category term="OpenShift Help" /><category term="OpenShift Tools" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=894557</id><updated>2021-04-21T07:00:18Z</updated><published>2021-04-21T07:00:18Z</published><content type="html">&lt;p&gt;Now that you have your own Red Hat OpenShift instance in our &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt; &amp;#8230;&lt;/p&gt; &lt;p&gt;What? You don&amp;#8217;t have your place in the free sandbox? Where you can experiment with &lt;a target="_blank" rel="nofollow" href="/topics/containers/"&gt;containers&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;? Then &lt;a target="_blank" rel="nofollow" href="/developer-sandbox"&gt;hurry over to the website&lt;/a&gt; and sign up; I&amp;#8217;ll wait.&lt;/p&gt; &lt;p&gt;Okay, now that you have your own OpenShift instance in our Developer Sandbox for Red Hat OpenShift, you can log in to the dashboard and click around, take a tour, launch applications—all the cool stuff. But what if you want to run from the command line? The command line is where automation (it&amp;#8217;s scripting, but &amp;#8220;automation&amp;#8221; sounds so much cooler) happens. Building a structure of repeatable actions is, after all, what we developers do.&lt;/p&gt; &lt;p&gt;How do you get access? This short article will show you. Let&amp;#8217;s get started.&lt;/p&gt; &lt;h2&gt;First stop: The OpenShift dashboard&lt;/h2&gt; &lt;p&gt;The first step is to log into your OpenShift dashboard. Once there, click on the little question mark in the upper right corner (see Figure 1). The menu that appears is the key to unlocking the command line. It also contains links to a world of great information; take advantage of it.&lt;/p&gt; &lt;div id="attachment_894567" style="width: 369px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark.png"&gt;&lt;img aria-describedby="caption-attachment-894567" class="wp-image-894567 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark.png" alt="The OpenShift dashboard menu, with the help icon highlighted." width="359" height="221" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark.png 359w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark-300x185.png 300w" sizes="(max-width: 359px) 100vw, 359px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894567" class="wp-caption-text"&gt;Figure 1: The OpenShift dashboard help icon.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In our case, we want to click the &lt;strong&gt;Command Line Tools&lt;/strong&gt; option, shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_894577" style="width: 192px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu.png"&gt;&lt;img aria-describedby="caption-attachment-894577" class="wp-image-894577 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu.png" alt="The OpenShift Help options menu, with the Command Line Tools option highlighted." width="182" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu.png 182w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_questionmark_menu-157x300.png 157w" sizes="(max-width: 182px) 100vw, 182px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894577" class="wp-caption-text"&gt;Figure 2: The OpenShift Help options menu.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The &lt;strong&gt;Command Line Tools&lt;/strong&gt; section of your dashboard is loaded with great tools, and you&amp;#8217;ll want to install some of them (&lt;code&gt;oc&lt;/code&gt; and &lt;code&gt;odo&lt;/code&gt; are must-haves, in my opinion). But right now we will focus on the very first link labeled &lt;strong&gt;Copy Login Command &lt;/strong&gt;(see Figure 3).&lt;/p&gt; &lt;div id="attachment_894587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page.png"&gt;&lt;img aria-describedby="caption-attachment-894587" class="wp-image-894587" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page.png" alt="The OpenShift command line tools page, with &amp;#34;Copy Login Command&amp;#34; highlighted." width="640" height="514" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page.png 953w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page-300x241.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_tools-page-768x616.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894587" class="wp-caption-text"&gt;Figure 3: The OpenShift command-line tools page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This link opens a new tab in your browser. When prompted to log in, simply click the &lt;strong&gt;DevSandbox&lt;/strong&gt; option. You&amp;#8217;ll land at what appears to be a rather unfinished web page. It&amp;#8217;s not unfinished; it&amp;#8217;s merely kept as simple as possible. You have one option, &lt;strong&gt;Display Token&lt;/strong&gt;, so click on it.&lt;/p&gt; &lt;h2&gt;A token of appreciation&lt;/h2&gt; &lt;p&gt;After you&amp;#8217;ve clicked &lt;strong&gt;Display Token&lt;/strong&gt;, your login token will appear, as well as the command you will need to log in (see Figure 4).&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You&amp;#8217;ll need to have the &lt;code&gt;oc&lt;/code&gt; command-line tool installed on your machine. Remember all the goodies I mentioned back on the &lt;strong&gt;Command Line Tools&lt;/strong&gt; page?&lt;/p&gt; &lt;div id="attachment_894627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token.png"&gt;&lt;img aria-describedby="caption-attachment-894627" class="wp-image-894627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-1024x207.png" alt="A sample API and login token displayed on the login command page." width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-1024x207.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-300x61.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token-768x155.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_api_token.png 1084w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894627" class="wp-caption-text"&gt;Figure 4: The API token and login command page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Copy the token to your clipboard and paste it to your command line. You can now access your sandbox from the command line (see Figure 5).&lt;/p&gt; &lt;div id="attachment_894637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in.png"&gt;&lt;img aria-describedby="caption-attachment-894637" class="wp-image-894637" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in.png" alt="The user logging into the project via the command-line interface." width="640" height="159" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in.png 986w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in-300x75.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/ds_command_line_logged_in-768x191.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-894637" class="wp-caption-text"&gt;Figure 5: Logging in from the command line.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Off and running&lt;/h2&gt; &lt;p&gt;Want to get an idea of what&amp;#8217;s at hand? Run the &lt;code&gt;oc new-app --list&lt;/code&gt; command and see what options are available to you. Just to whet your appetite, you can install:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An instance of MariaDB&lt;/li&gt; &lt;li&gt;.NET example code&lt;/li&gt; &lt;li&gt;An instance of MySQL&lt;/li&gt; &lt;li&gt;A Node.js example&lt;/li&gt; &lt;li&gt;Nginx&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;and dozens more.&lt;/p&gt; &lt;p&gt;Fun fact: You can also use the &lt;code&gt;kubectl&lt;/code&gt; command-line tool against your cluster.&lt;/p&gt; &lt;p&gt;Knock yourself out.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#38;linkname=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F21%2Faccess-your-developer-sandbox-for-red-hat-openshift-from-the-command-line%2F&amp;#038;title=Access%20your%20Developer%20Sandbox%20for%20Red%20Hat%20OpenShift%20from%20the%20command%20line" data-a2a-url="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/" data-a2a-title="Access your Developer Sandbox for Red Hat OpenShift from the command line"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/"&gt;Access your Developer Sandbox for Red Hat OpenShift from the command line&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/W2huw4RknqM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Now that you have your own Red Hat OpenShift instance in our Developer Sandbox for Red Hat OpenShift &amp;#8230; What? You don&amp;#8217;t have your place in the free sandbox? Where you can experiment with containers and Kubernetes and Red Hat OpenShift? Then hurry over to the website and sign up; I&amp;#8217;ll wait. Okay, now that [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/"&gt;Access your Developer Sandbox for Red Hat OpenShift from the command line&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">894557</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2021-04-21T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line/</feedburner:origLink></entry><entry><title type="html">Store health and safety - An architectural introduction</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7OYJJ5LGjbM/store-health-and-safety-architectural-introduction.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/EW4_zdCF3Zc/store-health-and-safety-architectural-introduction.html</id><updated>2021-04-21T05:00:00Z</updated><content type="html">Part 1 - An architectural introduction Welcome to a new series exploring a retail architecture blueprint. It's focusing on presenting access to ways of mapping successful implementations for specific use cases. It's an interesting challenge creating architectural content based on common customer adoption patterns. That's very different from most of the traditional marketing activities usually associated with generating content for the sole purpose of positioning products for solutions. When you're basing the content on actual execution in solution delivery, you're cutting out the chuff.  What's that mean? It means that it's going to provide you with a way to implement a solution using open source technologies by focusing on the integrations, structures and interactions that actually have been proven to work. What's not included are any vendor promises that you'll find in normal marketing content. Those promised that when it gets down to implementation crunch time, might not fully deliver on their promises. Enter the term Architectural Blueprint.  Let's look at these blueprints, how their created and what value they provide for your solution designs. THE PROCESS The first step is to decide the use case to start with, which in my case had to be linked to a higher level theme that becomes the leading focus. This higher level theme is not quite boiling the ocean, but it's so broad that it's going to require some division in to smaller parts. In this case we've aligned with the higher level theme being 'Retail' use cases, a vertical focus. This breaks down into the following use cases and in no particular order: * * * * * * Real-time stock control * Retail data framework The case we're tackling here is focused on Store Health and Safety. This use case we've defined as the following: Managing effective in-store compliance, health &amp;amp; safety, and employee checks and procedures. The approach taken is to research our existing customers that have implemented solutions in this space, collect their public facing content, research the internal implementation documentation collections from their successful engagements, and where necessary reach out to the field resources involved.  To get an idea of what these blueprints look like, we refer you to the series previously discussed here: * * * * Now on to the task at hand. WHAT'S NEXT The resulting content for this project targets the following three items. * A slide deck of the architectural blueprint for use telling the portfolio solution story. * Generic architectural diagrams providing the general details for the portfolio solution. * A write-up of the portfolio solution in a series that can be used for a customer solution brief. An overview of this series on store health and safety portfolio architecture blueprint: 1. 2. Common architectural elements 3. Example health and safety architecture Catch up on any past articles you missed by following any published links above. Next in this series, taking a look at the generic common architectural elements for the store health and safety architecture. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7OYJJ5LGjbM" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/EW4_zdCF3Zc/store-health-and-safety-architectural-introduction.html</feedburner:origLink></entry><entry><title type="html">Kogito Serverless Workflows at OpenShift Commons Briefing</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/G9RXKgpuVgc/kogito-serverless-workflows-at-openshift-commons-briefing.html" /><author><name>Ricardo Zanini</name></author><id>https://blog.kie.org/2021/04/kogito-serverless-workflows-at-openshift-commons-briefing.html</id><updated>2021-04-20T17:30:06Z</updated><content type="html">Last Monday, we gave a brief overview of the Kogito implementation of the , named Serverless Workflows, at . You can watch the recorded presentation here: Highlights: * Introduction to the CNCF Serverless Workflows * Overview of the Kogito Project * Event-Driven Applications Use Case Example * Kogito deployment model on OpenShift * Knative infrastructure * Short Demonstration * Q&amp;amp;A You can find the full example that we showcased in this presentation at our . Try it locally and give us your feedback! The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/G9RXKgpuVgc" height="1" width="1" alt=""/&gt;</content><dc:creator>Ricardo Zanini</dc:creator><feedburner:origLink>https://blog.kie.org/2021/04/kogito-serverless-workflows-at-openshift-commons-briefing.html</feedburner:origLink></entry><entry><title>C# 9 init accessors and records</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/LgNpjxtNCIw/" /><category term=".NET" /><category term="C#" /><category term="Kubernetes" /><category term="Uncategorized" /><category term=".NET 5" /><category term="C# 9" /><category term="init accessors" /><category term="records" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=873917</id><updated>2021-04-20T07:00:09Z</updated><published>2021-04-20T07:00:09Z</published><content type="html">&lt;p&gt;This is the fourth article in our C# 9 series. The previous articles covered &lt;a href="https://developers.redhat.com/blog/2021/03/30/c-9-top-level-programs-and-target-typed-expressions/" target="_blank" rel="nofollow noopener noreferrer"&gt;top-level programs and target-typed expressions&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2021/04/06/c-9-pattern-matching/" target="_blank" rel="nofollow noopener noreferrer"&gt;new features for pattern matching&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/blog/2021/04/13/c-9-new-features-for-methods-and-functions/" target="_blank" rel="nofollow noopener noreferrer"&gt;new features for methods and functions.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In this article, we’ll take a look at &lt;code&gt;init&lt;/code&gt; accessors and records.&lt;/p&gt; &lt;h2&gt;Init accessors&lt;/h2&gt; &lt;p&gt;C# 9 introduces a new accessor for properties named &lt;code&gt;init&lt;/code&gt;. The &lt;code&gt;init&lt;/code&gt; accessor works like a &lt;code&gt;public set&lt;/code&gt; accessor, but it can only be used during object initialization. Trying to set the property elsewhere gives a compilation error:&lt;/p&gt; &lt;pre&gt;public class Person { public string FirstName { get; init; } public string LastName { get; init; } } Person person = new() { FirstName = "John" // OK. }; person.FirstName = "Jane"; // error CS8852. &lt;/pre&gt; &lt;p&gt;&lt;code&gt;init&lt;/code&gt; accessors can be used in the constructor. And, a body may be provided for the accessor, which can change &lt;code&gt;readonly&lt;/code&gt; fields:&lt;/p&gt; &lt;pre&gt;public class Person { private readonly string _firstName; public Person(string firstName) { FirstName = firstName; } public string FirstName { get =&amp;#62; _firstName; init =&amp;#62; _firstName = value ?? throw new ArgumentNullException(nameof(value)); } public string LastName { get; init; } } &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;init&lt;/code&gt; accessors (that are used in the object initializer) will be called after the constructor. This means we can validate the property value, but we can&amp;#8217;t validate the object as a whole because we don&amp;#8217;t know when the user has finished setting properties. If such validation is needed, &lt;code&gt;init&lt;/code&gt; accessors cannot be used and values need to be passed as constructor arguments. Or, alternatively, an API accepting these types must validate them.&lt;/p&gt; &lt;h2&gt;Records&lt;/h2&gt; &lt;p&gt;C# classes are reference types. This means variables are not instances of the type, but they are references to an instance of that type (which lives on the managed heap). The default implementation of equality for reference types is to check whether two variables refer to the same instance:&lt;/p&gt; &lt;pre&gt;class Person { public string FirstName { get; set; }}; Assert.False(new Person { FirstName = "John" } .Equals(new Person { FirstName = "John" })); &lt;/pre&gt; &lt;p&gt;When working with objects that represent data, it can be useful to be able to compare two different instances and see if they have the same values. That is exactly what the new C# 9 records enable:&lt;/p&gt; &lt;pre&gt;record Person { public string FirstName { get; set; }}; Assert.True(new Person { FirstName = "John" } .Equals(new Person { FirstName = "John" })); &lt;/pre&gt; &lt;p&gt;We’ve changed the &lt;code&gt;Person&lt;/code&gt; declaration from &lt;code&gt;class&lt;/code&gt; to &lt;code&gt;record&lt;/code&gt;. Now two different instances that have the same values are considered equal.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Person&lt;/code&gt; &lt;code&gt;record&lt;/code&gt; is a &lt;code&gt;class&lt;/code&gt; for which the compiler generated an &lt;code&gt;IEquatable&lt;/code&gt; and &lt;code&gt;GetHashCode&lt;/code&gt; implementation that is based on the fields of the type. Doing this yourself in a &lt;code&gt;class&lt;/code&gt; is possible, but it is tedious and error-prone.&lt;/p&gt; &lt;p&gt;The compiler will also generate a &lt;code&gt;ToString&lt;/code&gt; method that returns a string with the type name, public field values and readable property values.&lt;/p&gt; &lt;p&gt;You can add constructors and other members to the &lt;code&gt;record&lt;/code&gt; as you would for a regular &lt;code&gt;class&lt;/code&gt;. Records support inheritance using the usual &lt;code&gt; : &lt;/code&gt; syntax:&lt;/p&gt; &lt;pre&gt;record Student : Person { public int ID { get; set; } } &lt;/pre&gt; &lt;p&gt;The equality implementation takes into account the runtime type: A &lt;code&gt;Person&lt;/code&gt; instance will never equal a &lt;code&gt;Student&lt;/code&gt; instance.&lt;/p&gt; &lt;p&gt;C# records can be used with &lt;code&gt;init&lt;/code&gt; accessors, which provides a convenient way to build types that cannot be modified after their creation (immutable types):&lt;/p&gt; &lt;pre&gt;public record Person { public string? FirstName { get; init; } public string? LastName { get; init; } } &lt;/pre&gt; &lt;p&gt;When working with immutable data, new values are often created by modifying existing ones. Records support this via the &lt;code&gt;with&lt;/code&gt; expression:&lt;/p&gt; &lt;pre&gt;Person jane = person with { FirstName = "Jane" }; &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;with&lt;/code&gt; expression copies the values from an instance and allows changing it through the &lt;code&gt;init&lt;/code&gt; accessors. The copying relies on a copy constructor that is generated for &lt;code&gt;record&lt;/code&gt; types.&lt;/p&gt; &lt;p&gt;A one-liner allows you to create an immutable record with a constructor and deconstruct method:&lt;/p&gt; &lt;pre&gt;record Person(string FirstName, string LastName); var person = new Person("John", "Doe"); (string firstName, string lastName) = person; &lt;/pre&gt; &lt;p&gt;A body can be added to the record, to add additional members or refine the properties that would otherwise be auto-generated:&lt;/p&gt; &lt;pre&gt;record Person(string FirstName, string lastName) { public string LastName { get; } = lastName; } &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, we looked at &lt;code&gt;init&lt;/code&gt; accessors, which we can use to declare immutable properties. We then saw how &lt;code&gt;records&lt;/code&gt; make it easy to build reference types with value semantics. By combining &lt;code&gt;init&lt;/code&gt; accessors and &lt;code&gt;records&lt;/code&gt;, we can build immutable data models that support change via the &lt;code&gt;with&lt;/code&gt; expression.&lt;/p&gt; &lt;p&gt;C# 9 can be used with the &lt;a href="https://developers.redhat.com/blog/2020/12/22/net-5-0-now-available-for-red-hat-enterprise-linux-and-red-hat-openshift/"&gt;.NET 5 SDK&lt;/a&gt;, which is available on &lt;a target="_blank" rel="nofollow" href="/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="http://fedoraloves.net/"&gt;Fedora&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://dotnet.microsoft.com/download"&gt;Windows, macOS, and other Linux distributions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#38;linkname=C%23%209%20init%20accessors%20and%20records" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fc-9-init-accessors-and-records%2F&amp;#038;title=C%23%209%20init%20accessors%20and%20records" data-a2a-url="https://developers.redhat.com/blog/2021/04/20/c-9-init-accessors-and-records/" data-a2a-title="C# 9 init accessors and records"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/20/c-9-init-accessors-and-records/"&gt;C# 9 init accessors and records&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/LgNpjxtNCIw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This is the fourth article in our C# 9 series. The previous articles covered top-level programs and target-typed expressions, new features for pattern matching, and new features for methods and functions. In this article, we’ll take a look at init accessors and records. Init accessors C# 9 introduces a new accessor for properties named init. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/20/c-9-init-accessors-and-records/"&gt;C# 9 init accessors and records&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/20/c-9-init-accessors-and-records/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">1</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">873917</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2021-04-20T07:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/20/c-9-init-accessors-and-records/</feedburner:origLink></entry><entry><title>Use Skupper to connect multiple Kubernetes clusters</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mVw-_xSqHT8/" /><category term="Containers" /><category term="Kubernetes" /><category term="Microservices" /><category term="CodeReady Containers" /><category term="OpenShift Developer Sandbox" /><category term="Skupper" /><author><name>Praveen Kumar</name></author><id>https://developers.redhat.com/blog/?p=891307</id><updated>2021-04-20T07:00:00Z</updated><published>2021-04-20T07:00:00Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://skupper.io/"&gt;Skupper&lt;/a&gt; is a Layer 7 service interconnect that enables multicloud communication across &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; clusters. There are a few reasons you might need to communicate between a local cluster and a remote one in development:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A service is deployed on the remote cluster, and you want to consume it with a local cluster.&lt;/li&gt; &lt;li&gt;A workload is high resource-consuming, and it is not feasible to deploy it on the local cluster given the available resources.&lt;/li&gt; &lt;li&gt;An existing stage/test database service is deployed on a remote cluster, and your workload needs to connect to it.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;One of the best things about Skupper is that users don’t need to have admin privileges for the cluster to deploy it. See the article &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/01/01/skupper-io-let-your-services-communicate-across-kubernetes-clusters/"&gt;Skupper.io: Let your services communicate across Kubernetes clusters&lt;/a&gt;&lt;/em&gt; for more information about the open source project.&lt;/p&gt; &lt;p&gt;This article will show you how to use Skupper to connect a remote cluster service with a local cluster using &lt;a target="_blank" rel="nofollow" href="/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;. For a more detailed overview, refer to the &lt;a target="_blank" rel="nofollow" href="https://skupper.io/start/index.html"&gt;Skupper getting started guide&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;About the example&lt;/h2&gt; &lt;p&gt;In this example, I am using &lt;a target="_blank" rel="nofollow" href="/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers (CRC)&lt;/a&gt; for my local cluster. CodeReady Containers is a developer tool that lets you create local Kubernetes clusters on &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift 4&lt;/a&gt;. I have another cluster from the &lt;a target="_blank" rel="nofollow" href="/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt; that I can access from anywhere.&lt;/p&gt; &lt;h2&gt;Step 1: Install the Skupper command-line tool&lt;/h2&gt; &lt;p&gt;First, install the Skupper command-line tool on your Linux system.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are using a different platform, refer to the instructions in the &lt;a target="_blank" rel="nofollow" href="https://skupper.io/start/index.html#step-1-install-the-skupper-command-line-tool-in-your-environment"&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;$ curl -fL https://github.com/skupperproject/skupper/releases/download/0.3.2/skupper-cli-0.3.2-linux-amd64.tgz | tar -xzf - $ sudo mv skupper /usr/local/bin $ which skupper  /usr/local/bin/skupper $ skupper --version skupper version 0.3.2 &lt;/pre&gt; &lt;h2&gt;Step 2: Configure access to multiple namespaces&lt;/h2&gt; &lt;p&gt;As the &lt;a target="_blank" rel="nofollow" href="https://skupper.io/start/index.html#step-2-configure-access-to-multiple-namespaces"&gt;getting started guide&lt;/a&gt; describes, the &lt;code&gt;skupper&lt;/code&gt; command uses the &lt;code&gt;kubeconfig&lt;/code&gt; file and the current context to select the namespace where it operates. You must use a distinct &lt;code&gt;kubeconfig&lt;/code&gt; or context for each namespace, so it’s best to use different console terminals, tabs, or sessions.&lt;/p&gt; &lt;p&gt;Start a console session for each namespace and log in to your clusters.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ export KUBECONFIG=$HOME/.kube/config-crc $ oc login -u developer -p developer https://api.crc.testing:6443 Login successful. $ oc config get-contexts CURRENT   NAME                              CLUSTER                AUTHINFO    NAMESPACE *         /api-crc-testing:6443/developer   api-crc-testing:6443   developer &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Developer Sandbox console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ export KUBECONFIG=$HOME/.kube/config-devsandbox $ oc login --token=&amp;#60;token&amp;#62; --server=https://api.sandbox-m2.ll9k.p1.openshiftapps.com:6443 Logged into "https://api.sandbox-m2.ll9k.p1.openshiftapps.com:6443" as "prkumar" using the token provided. You have access to the following projects and can switch between them with ' project &amp;#60;projectname&amp;#62;': * prkumar-code prkumar-dev prkumar-stage $ oc config get-contexts CURRENT   NAME                                                                 CLUSTER                                         AUTHINFO   NAMESPACE *         prkumar-code/api-sandbox-m2-ll9k-p1-openshiftapps-com:6443/prkumar   api-sandbox-m2-ll9k-p1-openshiftapps-com:6443   prkumar    prkumar-code &lt;/pre&gt; &lt;p&gt;Next, create a new project on CodeReady Containers. For this demo&amp;#8217;s purposes, we’ll use &lt;code&gt;prkumar-code&lt;/code&gt; as the default context for the Developer Sandbox side because we don’t have permission to create a new project.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ oc new-project demo Now using project "demo" on server "https://api.crc.testing:6443". &lt;/pre&gt; &lt;h2&gt;Step 3: Install the Skupper router in each namespace&lt;/h2&gt; &lt;p&gt;Run the &lt;code&gt;skupper init&lt;/code&gt; command to install the router in each namespace.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ skupper init --cluster-local Skupper is now installed in namespace 'demo'.  Use 'skupper status' to get more information.&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Developer Sandbox console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ skupper init Skupper is now installed in namespace 'prkumar-code'.  Use 'skupper status' to get more information.&lt;/pre&gt; &lt;p&gt;Now, check if the route is successfully installed.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ skupper status Skupper is enabled for namespace "prkumar-code" in interior mode. It is not connected to any other sites. It has no exposed services. &lt;/pre&gt; &lt;h2&gt;Step 4: Connect your namespaces&lt;/h2&gt; &lt;p&gt;Generate the &lt;a target="_blank" rel="nofollow" href="https://skupper.io/start/index.html#step-4-link-your-namespaces"&gt;connection token&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Developer Sandbox console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ skupper connection-token $HOME/secret.yaml Connection token written to /home/prkumar/secret.yaml &lt;/pre&gt; &lt;p&gt;Then, use the token to connect to your CRC cluster.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ skupper connect $HOME/secret.yaml Skupper configured to connect to skupper-inter-router-prkumar-code.apps.sandbox-m2.ll9k.p1.openshiftapps.com:443 (name=conn1)&lt;/pre&gt; &lt;h2&gt;Step 5: Expose your front-end and back-end services&lt;/h2&gt; &lt;p&gt;Here we will use a back-end and a front-end service, as mentioned in the &lt;a target="_blank" rel="nofollow" href="https://skupper.io/start/index.html#step-5-expose-your-services"&gt;getting started guide&lt;/a&gt;. First, we will deploy the back-end service on the Developer Sandbox and the front-end service to CRC. Then, we’ll connect the back end with the front end.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ oc  create deployment hello-world-frontend --image quay.io/skupper/hello-world-frontend deployment.apps/hello-world-frontend created &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Developer Sandbox console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ oc create deployment hello-world-backend --image quay.io/skupper/hello-world-backend deployment.apps/hello-world-backend created &lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;skipper expose&lt;/code&gt; command to expose the back-end service so it will be available on your CRC cluster.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Developer Sandbox console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ skupper expose deployment hello-world-backend --port 8080 --protocol http&lt;/pre&gt; &lt;p&gt;As you can see, once you expose a service using Skupper, it is visible to the CRC cluster.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ oc get svc NAME                  TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)               AGE hello-world-backend   ClusterIP   10.217.5.209   &amp;#60;none&amp;#62;        8080/TCP              96s &lt;/pre&gt; &lt;p&gt;Finally, test your front-end application to verify it can communicate with the back-end service.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CodeReady Containers console:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;$ oc expose deployment hello-world-frontend --port 8080 service/hello-world-frontend exposed $ oc expose svc hello-world-frontend route.route.openshift.io/hello-world-frontend exposed $ curl hello-world-frontend-demo.apps-crc.testing I am the frontend.  The backend says 'Hello from hello-world-backend-7dfb45b98d-j8q8t (2)'. &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As we saw in this article, Skupper comes in handy when two clusters need to be connected, and CodeReady Containers provides a great local experience for OpenShift. Happy Skuppering!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#38;linkname=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F20%2Fuse-skupper-to-connect-multiple-kubernetes-clusters%2F&amp;#038;title=Use%20Skupper%20to%20connect%20multiple%20Kubernetes%20clusters" data-a2a-url="https://developers.redhat.com/blog/2021/04/20/use-skupper-to-connect-multiple-kubernetes-clusters/" data-a2a-title="Use Skupper to connect multiple Kubernetes clusters"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/20/use-skupper-to-connect-multiple-kubernetes-clusters/"&gt;Use Skupper to connect multiple Kubernetes clusters&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mVw-_xSqHT8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Skupper is a Layer 7 service interconnect that enables multicloud communication across Kubernetes clusters. There are a few reasons you might need to communicate between a local cluster and a remote one in development: A service is deployed on the remote cluster, and you want to consume it with a local cluster. A workload is high [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/20/use-skupper-to-connect-multiple-kubernetes-clusters/"&gt;Use Skupper to connect multiple Kubernetes clusters&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/20/use-skupper-to-connect-multiple-kubernetes-clusters/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">891307</post-id><dc:creator>Praveen Kumar</dc:creator><dc:date>2021-04-20T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/20/use-skupper-to-connect-multiple-kubernetes-clusters/</feedburner:origLink></entry></feed>
